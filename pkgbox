#!/usr/bin/env bash
################################################################################
# pkgbox - The build toolbox
# 
# Copyright 2012 Dominik D. Geyer <dominik.geyer@gmail.com>
# License: GPLv3 (see file LICENSE)
################################################################################

set -eE  #x
set -o pipefail

# unset all aliases
unalias -a

# test for too old bash version
if ((BASH_VERSINFO[0] < 4)); then
	echo "Error: This script requires a bash version >= 4.0 (got $BASH_VERSION). Exiting." >&2
	exit 1
fi

# debug: remember initial variables on script start
__VARS=$(set -o posix; set)

# determine absolute location of script
declare -r PKGBOX_PATH=$(dirname "$(readlink -f "$BASH_SOURCE")")

# include basic lib
source "$PKGBOX_PATH/include/basic.sh" || { echo "Fatal error: Cannot find basic helpers" >&2; exit 1; }

# trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR
trap 'pkgbox_die trap ${10:-$?}' 1 2 3 15 ERR

declare -i PKGBOX_VERBOSITY=1
declare -A PKGBOX_OPTS
declare -A PKGBOX_OPTS_USR

################################################################################
# parse options
while getopts ":vD:V:Th" opt; do
	case $opt in
	v)	# be verbose; each -v increases the verbosity level
		PKGBOX_VERBOSITY=$((PKGBOX_VERBOSITY + 1))
		;;
	q)	# be quiet; each -q decreases the verbosity level
		PKGBOX_VERBOSITY=$((PKGBOX_VERBOSITY - 1))
		;;
	V)	# override package version
		PV=$OPTARG
		;;
	D)	# defines a special config variable
		PKGBOX_OPTS_USR[${OPTARG%%=*}]=${OPTARG#*=}
		;;
	T)	# runs test suite
		PKGBOX_TEST=1
		;;
	h)
		pkgbox_usage >&2
		exit 0
		;;
	\?)
		echo "Error: Invalid option -$OPTARG" >&2
		pkgbox_usage >&2
		exit 1
		;;
	:)
		echo "Error: Option -$OPTARG requires an argument" >&2
		pkgbox_usage >&2
		exit 1
		;;
	esac
done

shift $((OPTIND-1))		# shift options
unset opt OPTIND		# unset variables used for option parsing

# the action and script are required arguments (in non-test mode)
if [[ -z "$PKGBOX_TEST" ]]; then
	if [[ $# < 2 ]]; then
		pkgbox_usage >&2
		exit 1
	fi

	declare PKGBOX_PACKAGE=$1
	declare -r PKGBOX_ACTION=$2
fi

declare -A PKGBOX_DIR

################################################################################
# include config(s)
for c in /etc/pkgbox "${PKGBOX_OPTS_USR[base]:-"$HOME/.pkgbox"}/conf" "${PKGBOX_OPTS_USR[config]}"; do
	if [[ -r $c && -f $c ]]; then
		pkgbox_msg info "Using config '$c'"
		source "$c"
	fi
done
unset c

# merge user provided options with config array (override config with user options)
if [[ ${#PKGBOX_OPTS_USR[@]} > 0 ]]; then
	for o in "${!PKGBOX_OPTS_USR[@]}"; do
		pkgbox_msg debug "Overriding option $o"
		PKGBOX_OPTS[$o]=${PKGBOX_OPTS_USR[$o]}
	done
fi

# debug output all options
if [[ ${#PKGBOX_OPTS[@]} > 0 ]]; then
	for o in "${!PKGBOX_OPTS[@]}"; do
		pkgbox_msg debug "OPTION: $(printf '% 15s' "$o") = '${PKGBOX_OPTS[$o]}'"
	done
fi
unset PKGBOX_OPTS_USR o

################################################################################
# general setup: pkgbox directories, ...

PKGBOX_DIR[base]=${PKGBOX_OPTS[base]}   # override by option

: ${PKGBOX_DIR[base]:="$HOME/.pkgbox"}
: ${PKGBOX_DIR[packages]:="$PKGBOX_PATH/pkg"}
: ${PKGBOX_DIR[tmp]:="${PKGBOX_DIR[base]}/tmp"}
: ${PKGBOX_DIR[download]:="${PKGBOX_DIR[base]}/download"}

for d in "${PKGBOX_DIR[@]}"; do
	if [[ ! -d "$d" ]]; then
		pkgbox_msg info "Creating pkgbox directory '$d'"
		mkdir -p "$d" || pkgbox_die "Cannot create pkgbox directory '$d'" 2
	fi
done
unset d

################################################################################
# include other helpers and perform checks

pkgbox_include "include/build.sh"
pkgbox_include "include/utils.sh"

# FIXME: Test for dependencies (commands)? Maybe when option "selftest" defined?

################################################################################
# main or test

# allow overriding install-prefix by option
: ${PKGBOX_OPTS[prefix]:="/usr/local"}

if [[ -n "$PKGBOX_TEST" ]]; then
	pkgbox_include "include/_coretest.sh"
	_run_tests
else
	pkgbox_msg info  "Performing action '$PKGBOX_ACTION' on package '$PKGBOX_PACKAGE'"
	
	# no explicit pkgbox-file given? try some default paths...
	if [[ ! -f "$PKGBOX_PACKAGE" ]]; then
		for f in \
			"${PKGBOX_DIR[packages]}/${PKGBOX_PACKAGE}/${PKGBOX_PACKAGE##*/}.pkgbox" \
			"${PKGBOX_DIR[packages]}/${PKGBOX_PACKAGE##*/}.pkgbox"
		do
			[[ -f "$f" ]] && { PKGBOX_PACKAGE=$f; break; }
		done
		unset f
	fi
	
	pkgbox_action "$PKGBOX_ACTION" "$PKGBOX_PACKAGE"
fi

################################################################################
# debug: show variables defined by this script
if (( PKGBOX_VERBOSITY > 3 )); then
	pkgbox_msg debug "Variables defined by this script:"
	grep -vFe "$__VARS" <<<"$(set -o posix; set)" | grep -v "^__VARS=" >&2
fi

