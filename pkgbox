#!/usr/bin/env bash

set -e  #x
set -o pipefail		# http://petereisentraut.blogspot.de/2010/11/pipefail.html

# trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR
# http://fvue.nl/wiki/Bash:_Error_handling
trap pkgbox_trap 1 2 3 15 ERR

# remember variables on script start
__VARS="$(set -o posix; set)"

# absolute location of script
declare -r PKGBOX_PATH="$(dirname "$(readlink -f "$BASH_SOURCE")")"

################################################################################

# print usage (stdout)
function pkgbox_usage()
{
	echo "Usage: ${0##*/} [OPTION]... <ACTION> <PKGFILE>"
}

# print message (stderr) and die
# @param string... msg
# @param [int=1] exitcode
function pkgbox_die()
{
	local exitcode=1 msg="$@"
	
	# use last argument as exit code if it is an integer
	pkgbox_is_int "${@:$#}" && msg="${@:1:$# - 1}" exitcode="${@:$#}"
	
	echo "[pkgbox die] ($exitcode) $msg" >&2
	exit $exitcode
}

# trap handler
function pkgbox_trap()
{
	pkgbox_die $FUNCNAME ${10:-$?}
}

# includes functionality
function pkgbox_include()
{
	local file="$PKGBOX_PATH/$1"
	[[ -r $file && -f $file ]] || pkgbox_die "Include file '$1' not found" 2
	
	# FIXME: "set -e" and "trap" on working on sourced script?
	source "$file"
}

# tests if function exists
# @param string function name
# @return int non-zero if function does not exist
function pkgbox_is_function()
{
	declare -F "$1" >/dev/null
}

# tests if value is an integer (may be negative)
# @param string value
# @return int non-zero if value is not an integer
function pkgbox_is_int()
{
	echo $1 | egrep '^-?[0-9]+$' >/dev/null
}

################################################################################

declare -i PKGBOX_VERBOSITY=0
declare -A PKGBOX_OPTS

while getopts ":vD:h" opt; do
	case $opt in
	# be verbose; each -v adds to the verbosity level
	v)
		PKGBOX_VERBOSITY=$((PKGBOX_VERBOSITY + 1))
		;;
	# defines a special config variable... just a test for now
	D)
		PKGBOX_OPTS[${OPTARG%%=*}]="${OPTARG#*=}"
		;;
	h)
		pkgbox_usage >&2
		exit 0
		;;
	\?)
		pkgbox_die "Invalid option: -$OPTARG"
		;;
	:)
		pkgbox_die "Option -$OPTARG requires an argument"
		;;
	esac
done

shift $((OPTIND-1))		# shift options
unset opt OPTIND		# unset variables used for option parsing

# the action and script are required arguments
if [[ $# < 2 ]]; then
	pkgbox_usage >&2
	exit 1
fi

declare -r PKGBOX_ACTION="$1"
declare -r PKGBOX_SCRIPT="$2"

################################################################################

# include basic libs
pkgbox_include "include/basic.sh"

(( PKGBOX_VERBOSITY > 2 )) && echo "Verbosity is set to DEBUG (value: $PKGBOX_VERBOSITY)"

################################################################################

#pkgbox_is_function pkgbox_usage || pkgbox_die "pkgbox_usage is no function"
#pkgbox_is_function foobar || pkgbox_die "foobar is no function"
#echo ${PKGBOX_OPTS[test]}

pkgbox_echo "$(pkgbox_sgr fg=red)Bash$(pkgbox_sgr) is a" \
	"$(pkgbox_sgr fg=blue)command $(pkgbox_sgr bold)processor$(pkgbox_sgr)," \
	"typically $(pkgbox_sgr underline)run$(pkgbox_sgr) in a" \
	"$(pkgbox_sgr reverse)text window$(pkgbox_sgr), allowing" \
	"$(pkgbox_sgr bg=red)t$(pkgbox_sgr bg=green)h$(pkgbox_sgr bg=blue)e$(pkgbox_sgr)" \
	"$(echo -n -e "\n\t")user to type commands which cause $(pkgbox_sgr fg=yellow)actions."

pkgbox_echo -n -e "\n\nHello\t$(pkgbox_sgr bold)dear$(pkgbox_sgr) friend: $(pkgbox_sgr reverse)"

echo "A normal echo"

# show variables defined by this script
#(grep -vFe "$__VARS" <<<"$(set -o posix; set)" | grep -v ^__VARS=) | less

