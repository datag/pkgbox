#!/usr/bin/env bash
################################################################################
# pkgbox - The build toolbox
# 
# Copyright 2012, 2013  Dominik D. Geyer <dominik.geyer@gmail.com>
# License: GPLv3 (see file LICENSE)
################################################################################

set -o errexit -o errtrace -o pipefail -o nounset

# unset all aliases
unalias -a

# test for too old bash version
if (( BASH_VERSINFO[0] < 4 )); then
	echo "Error: This script requires a bash version >= 4.0 (got $BASH_VERSION). Exiting." >&2
	exit 1
fi

# debug: remember initial variables on script start
__VARS=$(set -o posix; set)

# determine absolute location of script
declare -r PKGBOX_PATH=$(dirname "$(readlink -f "$BASH_SOURCE")")

# NOTE: adjust this path to fit your installation layout or provide $PKGBOX_INCLUDE via environment
declare -r PKGBOX_INCLUDE="${PKGBOX_INCLUDE-$PKGBOX_PATH/include}"

# include core lib
source "$PKGBOX_INCLUDE/core.sh" || { echo "Fatal error: Cannot include core library." >&2; exit 1; }

# core variables
declare -i PKGBOX_VERBOSITY=1
declare -A PKGBOX_DIR O F

# trap signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM and special ERR and EXIT
trap 'pkgbox_trap_handler ${?-99} "${BASH_COMMAND-}" "${BASH_SOURCE-}" "${LINENO-}"' HUP INT QUIT TERM ERR EXIT

################################################################################
# parse options
declare -A O_USR	# option override
declare -a F_USR	# feature override

while getopts ":vqD:F:V:Th" opt; do
	case $opt in
	v)	# be verbose; each -v increases the verbosity level
		(( ++PKGBOX_VERBOSITY )) || :
		;;
	q)	# be quiet; each -q decreases the verbosity level
		(( --PKGBOX_VERBOSITY )) || :
		;;
	V)	# override package version
		PV=$OPTARG
		;;
	D)	# option override
		O_USR[${OPTARG%%=*}]=${OPTARG#*=}
		;;
	F)	# feature override
		F_USR+=("$OPTARG")
		;;
	T)	# marker for running test suite (alias for -D test)
		O_USR[test]=1
		;;
	h)	# just display help message and exit with success
		pkgbox_usage >&2
		pkgbox_exit 0
		;;
	\?)
		echo "Error: Invalid option -$OPTARG" >&2
		pkgbox_usage >&2
		pkgbox_exit 1
		;;
	:)
		echo "Error: Option -$OPTARG requires an argument" >&2
		pkgbox_usage >&2
		pkgbox_exit 1
		;;
	esac
done

# shift options and unset variables used for option parsing
shift $((OPTIND-1))
unset opt OPTIND

################################################################################
# include config(s)
for i in /etc/pkgbox "${O_USR[base]:-"$HOME/.pkgbox"}/conf" "${O_USR[config]-}"; do
	if [[ -f $i ]]; then
		pkgbox_msg info "Including config '$i'"
		source "$i"
	fi
done

# user-override of config options (via option -D)
for i in "${!O_USR[@]}"; do
	pkgbox_msg debug "Overriding option '$i'"
	O[$i]=${O_USR[$i]}
done

# prepend package features from configs to user-overrides (option -F)
if (( ${#FEATURES[@]} && ${#F_USR[@]} )); then
	F_USR=("${FEATURES[@]}" "${F_USR[@]}")
elif (( ${#FEATURES[@]} )); then
	F_USR=("${FEATURES[@]}")
fi

unset O_USR FEATURES i		# WARN: FEATURES is used as a package variable, too

# debug output all options
pkgbox_debug_vars O F_USR 

################################################################################
# general setup

# pkgbox directories (allow override via option)
PKGBOX_DIR[base]=${O[base]:-"$HOME/.pkgbox"}
PKGBOX_DIR[packages]=${O[packages]:-"$PKGBOX_PATH/pkg"}
PKGBOX_DIR[download]=${O[download]:-"${PKGBOX_DIR[base]}/download"}
PKGBOX_DIR[build]=${O[build]:-"${PKGBOX_DIR[base]}/build"}


# create directories
for d in "${PKGBOX_DIR[@]}"; do
	if [[ ! -d $d ]]; then
		pkgbox_msg info "Creating pkgbox directory '$d'"
		mkdir -p "$d" || pkgbox_die "Cannot create pkgbox directory '$d'"
	fi
done
unset d


# set default install-prefix, if not already set or empty via option
: ${O[prefix]:="/usr/local"}

################################################################################
# include required libraries
pkgbox_include "build"
pkgbox_include "package"
pkgbox_include "utils"

################################################################################
# main
if [[ ! ${O[test]-} ]]; then
	# the package is a required argument
	if (( $# < 1 || $# > 2 )); then
		pkgbox_usage >&2
		pkgbox_exit 1
	fi
	
	declare -r PKGBOX_PACKAGE=$1
	declare -r PKGBOX_ACTION=${2:-info}
	
	pkgbox_msg info  "Performing action '$PKGBOX_ACTION' on package '$PKGBOX_PACKAGE'"
	
	pkgbox_action "$PKGBOX_ACTION" "$PKGBOX_PACKAGE"
else
	# test mode
	pkgbox_include "_coretest"
	pkgbox_testsuite
fi

################################################################################
# debug mode: show variables defined by this script
if (( PKGBOX_VERBOSITY > 3 )); then
	pkgbox_msg debug "Variables defined by this script:"
	grep -vFe "$__VARS" <<<"$(set -o posix; set)" | grep -v "^__VARS=" >&2
fi

################################################################################
# exit with success (turns off EXIT trap)
pkgbox_exit

