#!/usr/bin/env bash

set -eE  #x
set -o pipefail		# http://petereisentraut.blogspot.de/2010/11/pipefail.html

# test for too old bash version
if ((BASH_VERSINFO[0] < 4)); then
	echo "Error: This script requires a bash version >= 4.0 (got $BASH_VERSION). Exiting." >&2
	exit 1
fi

# debug: remember initial variables on script start
__VARS="$(set -o posix; set)"

# determine absolute location of script
declare -r PKGBOX_PATH="$(dirname "$(readlink -f "$BASH_SOURCE")")"

# include basic lib
source "$PKGBOX_PATH/include/basic.sh" || { echo "Fatal error: Cannot find basic helpers" >&2; exit 1; }

# trap non-normal exit signals: 1/HUP, 2/INT, 3/QUIT, 15/TERM, ERR
# http://fvue.nl/wiki/Bash:_Error_handling
trap 'pkgbox_die trap ${10:-$?}' 1 2 3 15 ERR

################################################################################
# parsing options
declare -i PKGBOX_VERBOSITY=0
declare -A PKGBOX_OPTS

while getopts ":vD:h" opt; do
	case $opt in
	# be verbose; each -v increases the verbosity level
	v)
		PKGBOX_VERBOSITY=$((PKGBOX_VERBOSITY + 1))
		;;
	# defines a special config variable... just a test for now
	D)
		PKGBOX_OPTS[${OPTARG%%=*}]="${OPTARG#*=}"
		;;
	h)
		pkgbox_usage >&2
		exit 0
		;;
	\?)
		echo "Error: Invalid option -$OPTARG" >&2
		pkgbox_usage >&2
		exit 1
		;;
	:)
		echo "Error: Option -$OPTARG requires an argument" >&2
		pkgbox_usage >&2
		exit 1
		;;
	esac
done

shift $((OPTIND-1))		# shift options
unset opt OPTIND		# unset variables used for option parsing

# the action and script are required arguments
if [[ $# < 2 ]]; then
	pkgbox_usage >&2
	exit 1
fi

declare -r PKGBOX_ACTION="$1"
declare -r PKGBOX_PACKAGE="$2"

[[ ${#PKGBOX_OPTS[@]} > 0 ]] && pkgbox_msg debug "Using options: ${!PKGBOX_OPTS[@]}"

################################################################################
# general setup: pkgbox directories, ...
declare -A PKGBOX_DIR

PKGBOX_DIR[base]="$HOME/.pkgbox"
PKGBOX_DIR[tmp]="${PKGBOX_DIR[base]}/tmp"
PKGBOX_DIR[download]="${PKGBOX_DIR[base]}/download"

for d in "${PKGBOX_DIR[@]}"; do
	if [[ ! -d "$d" ]]; then
		pkgbox_msg info "Creating pkgbox directory '$d'"
		mkdir -p "$d" || pkgbox_die "Cannot create pkgbox directory '$d'" 2
	fi
done
unset d

################################################################################
# include other helpers and perform checks

pkgbox_include "include/utils.sh"

# FIXME:Ttest for dependencies (commands)? Maybe when option "selftest" defined?

################################################################################
# main or test

if [[ ${PKGBOX_OPTS[test]} ]]; then
	pkgbox_include "include/_coretest.sh"
	_run_tests
else
	pkgbox_msg info  "Performing action '$PKGBOX_ACTION' on package '$PKGBOX_PACKAGE'"
fi

################################################################################
# debug: show variables defined by this script
if (( PKGBOX_VERBOSITY > 2 )); then
	pkgbox_msg debug "Variables defined by this script:"
	grep -vFe "$__VARS" <<<"$(set -o posix; set)" | grep -v "^__VARS="
fi

